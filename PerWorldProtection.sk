# PerWorldProtection Beta v3
# DISCLAIMER: Many errors may appear when reloading this script, but they can be safely ignored and don't affect functionality.

options:
    # List of protected worlds (case sensitive) - leave empty to protect all worlds
    protected-worlds: "example,another_example"
    
    # List of spawn-only protected worlds (case sensitive) - only spawn radius protection
    spawn-protected-worlds: "example,another_example"
    protection-radius: 0  # 0 = disabled, >0 = protect X blocks around spawn

    # Feature toggles - set to true/false
    block-break: true
    block-place: true
    block-interact: true
    entity-interact: true
    entity-damage: true
    item-drop: true
    item-pickup: true
    inventory-access: true
    bucket-usage: true
    pvp: true
    player-damage: true
    mob-spawning: false
    explosions: true
    liquid-flow: false
    fire-spread: true
    leaf-decay: false
    crop-trample: true
    enderman-grief: true
    
    # Advanced options
    enable-logging: false
    notify-admins: false
    kick-on-violation: false
    kick-violations-limit: 50
    
    # Message options
    welcome-message-enabled: true
    no-permission-messages: true
    
    # Whitelist certain entities from damage protection (use minecraft IDs like "cow,pig,villager")
    whitelisted-entities: " "
    
    # Custom messages
    no-permission-message: "&7[PWP] &cYou don't have permission to do that in this world!"
    admin-notification: "&7[PWP] &e{player} &7tried to &c{action} &7in world &b{world}"

# ============================================================================
# DO NOT CHANGE ANYTHING BEYOND THIS POINT UNLESS YOU KNOW WHAT YOU ARE DOING.
# ============================================================================

# Command to display plugin information and manage plugin
command /perworldprotection [<text>] [<text>]:
    aliases: /pwp
    description: Display PerWorldProtection plugin information and manage settings
    trigger:
        if arg-1 is not set:
            send "&7[PWP] &8---- &cPer&eWor&aldP&brot&9ect&dion &8----"
            send "&7[PWP] &7Version: &eBeta v3"
            send "&7[PWP] &7Author: &eihatemustard"
            send "&7[PWP] &7Description: &fComprehensive world protection system"
            send "&7[PWP] &7Commands:"
            send "&7[PWP] &8  - &e/pwp reload &7- Reload configuration"
            send "&7[PWP] &8  - &e/pwp status [world] &7- Check protection status"
            
        else if arg-1 is "reload":
            if player has permission "perworldprotection.admin":
                set {_scriptName} to name of script
                execute console command "sk reload %{_scriptName}%"
                send "&7[PWP] &aConfiguration reloaded successfully!"
            else:
                send "&7[PWP] &cYou don't have permission to do that!"
                
        else if arg-1 is "status":
            if player has permission "perworldprotection.status":
                set {_targetWorld} to world of player
                if arg-2 is set:
                    set {_targetWorld} to world arg-2
                    if {_targetWorld} is not set:
                        send "&7[PWP] &cWorld '%arg-2%' not found!"
                        stop
                        
                send "&7[PWP] &8---- &cProtection Status &8----"
                send "&7[PWP] &7World: &e%{_targetWorld}%"
                
                set {_isProtected} to isWorldProtected({_targetWorld})
                set {_isSpawnOnly} to isSpawnProtected({_targetWorld})
                
                    
                # Show protection radius
                if {@protection-radius} is greater than 0:
                    send "&7[PWP] &7Spawn radius: &e{@protection-radius} &7blocks"
                else:
                    send "&7[PWP] &7Spawn radius: &aDisabled"
                
                # Show enabled features (only for full protection)
                if {_isProtected} is true:
                    send "&7[PWP] &7Enabled features:"
                    if {@block-break} is true:
                        send "&7[PWP] &8  - &eBlock Breaking Protection"
                    if {@block-place} is true:
                        send "&7[PWP] &8  - &eBlock Placing Protection"
                    if {@block-interact} is true:
                        send "&7[PWP] &8  - &eBlock Interaction Protection"
                    if {@entity-interact} is true:
                        send "&7[PWP] &8  - &eEntity Interaction Protection"
                    if {@entity-damage} is true:
                        send "&7[PWP] &8  - &eEntity Damage Protection"
                    if {@item-drop} is true:
                        send "&7[PWP] &8  - &eItem Drop Protection"
                    if {@item-pickup} is true:
                        send "&7[PWP] &8  - &eItem Pickup Protection"
                    if {@inventory-access} is true:
                        send "&7[PWP] &8  - &eInventory Access Protection"
                    if {@bucket-usage} is true:
                        send "&7[PWP] &8  - &eBucket Usage Protection"
                    if {@pvp} is true:
                        send "&7[PWP] &8  - &ePvP Protection"
                    if {@player-damage} is true:
                        send "&7[PWP] &8  - &ePlayer Damage Protection"
                    if {@explosions} is true:
                        send "&7[PWP] &8  - &eExplosion Protection"
                    if {@fire-spread} is true:
                        send "&7[PWP] &8  - &eFire Spread Protection"
                    if {@crop-trample} is true:
                        send "&7[PWP] &8  - &eCrop Trampling Protection"
                    if {@enderman-grief} is true:
                        send "&7[PWP] &8  - &eEnderman Griefing Protection"
                    if {@mob-spawning} is true:
                        send "&7[PWP] &8  - &eMob Spawning Blocked"
                    if {@liquid-flow} is true:
                        send "&7[PWP] &8  - &eLiquid Flow Blocked"
                    if {@leaf-decay} is true:
                        send "&7[PWP] &8  - &eLeaf Decay Blocked"
                
                # Show whitelisted items
                if "%{@whitelisted-entities}%" is not "":
                    send "&7[PWP] &7Whitelisted entities: &a%{@whitelisted-entities}%"
                
                # Show admin settings
                if {@enable-logging} is true:
                    send "&7[PWP] &7Logging: &aEnabled"
                if {@notify-admins} is true:
                    send "&7[PWP] &7Admin notifications: &aEnabled"
                if {@kick-on-violation} is true:
                    send "&7[PWP] &7Kick on violation: &aEnabled &7(limit: &c{@kick-violations-limit}&7)"
                    
                # Show violation count if player
                if {pwp.violations.%player%} is set:
                    send "&7[PWP] &7Your violations: &c%{pwp.violations.%player%}%"
            else:
                send "&7[PWP] &cYou don't have permission to do that!"
        else:
            send "&7[PWP] &cUnknown command. Use /pwp for help."

# Function to check if world is protected
function isWorldProtected(w: world) :: boolean:
    set {_worldName} to "%{_w}%"
    if "%{@protected-worlds}%" is "":
        return true  # Protect all worlds if list is empty
    if "%{@protected-worlds}%" contains {_worldName}:
        return true
    return false

# Function to check if world is spawn-only protected
function isSpawnProtected(w: world) :: boolean:
    set {_worldName} to "%{_w}%"
    if "%{@spawn-protected-worlds}%" contains {_worldName}:
        return true
    return false

# Function to check if block is whitelisted
function isBlockWhitelisted(b: block) :: boolean:
    return false  # Whitelisted blocks feature removed

# Function to check if entity is whitelisted
function isEntityWhitelisted(e: entity) :: boolean:
    set {_entityType} to "%type of {_e}%"
    if "%{@whitelisted-entities}%" contains {_entityType}:
        return true
    return false

# Function to check spawn protection radius
function isInSpawnRadius(loc: location) :: boolean:
    if {@protection-radius} is less than or equal to 0:
        return false
    set {_spawn} to spawn of world of {_loc}
    set {_distance} to distance between {_loc} and {_spawn}
    if {_distance} is less than or equal to {@protection-radius}:
        return true
    return false

# Function to notify admins and log actions
function notifyViolation(p: player, action: text, w: world):
    if {@enable-logging} is true:
        console command "say [PWP] %{_p}% tried to %{_action}% in %{_w}%"
    if {@notify-admins} is true:
        loop all players:
            if loop-player has permission "perworldprotection.notify":
                set {_msg} to "&7[PWP] &e%{_p}% &7tried to &c%{_action}% &7in world &b%{_w}%"
                send {_msg} to loop-player

# Function to handle kick on violation
function handleViolation(p: player):
    if {@kick-on-violation} is true:
        add 1 to {pwp.violations.%{_p}%}
        if {pwp.violations.%{_p}%} >= {@kick-violations-limit}:
            kick {_p} due to "Too many protection violations!"
            delete {pwp.violations.%{_p}%}

# Block breaking protection
on break:
    if {@block-break} is true:
        set {_world} to world of event-block
        if isWorldProtected({_world}) is true:
            if player doesn't have permission "perworldprotection.bypass":
                if player doesn't have permission "perworldprotection.bypass.%{_world}%":
                    if isInSpawnRadius(location of event-block) is true:
                        if player doesn't have permission "perworldprotection.bypass.spawn":
                            cancel event
                            if {@no-permission-messages} is true:
                                send "&7[PWP] &cYou cannot break blocks near spawn!" to player
                            notifyViolation(player, "break blocks near spawn", {_world})
                            handleViolation(player)
                            stop
                    cancel event
                    if {@no-permission-messages} is true:
                        send {@no-permission-message} to player
                    notifyViolation(player, "break blocks", {_world})
                    handleViolation(player)
        else if isSpawnProtected({_world}) is true:
            if isInSpawnRadius(location of event-block) is true:
                if player doesn't have permission "perworldprotection.bypass.spawn":
                    cancel event
                    if {@no-permission-messages} is true:
                        send "&7[PWP] &cYou cannot break blocks near spawn!" to player
                    notifyViolation(player, "break blocks near spawn", {_world})
                    handleViolation(player)

# Block placing protection
on place:
    if {@block-place} is true:
        set {_world} to world of event-block
        if isWorldProtected({_world}) is true:
            if player doesn't have permission "perworldprotection.bypass":
                if player doesn't have permission "perworldprotection.bypass.%{_world}%":
                    if isInSpawnRadius(location of event-block) is true:
                        if player doesn't have permission "perworldprotection.bypass.spawn":
                            cancel event
                            if {@no-permission-messages} is true:
                                send "&7[PWP] &cYou cannot place blocks near spawn!" to player
                            notifyViolation(player, "place blocks near spawn", {_world})
                            handleViolation(player)
                            stop
                    cancel event
                    if {@no-permission-messages} is true:
                        send {@no-permission-message} to player
                    notifyViolation(player, "place blocks", {_world})
                    handleViolation(player)
        else if isSpawnProtected({_world}) is true:
            if isInSpawnRadius(location of event-block) is true:
                if player doesn't have permission "perworldprotection.bypass.spawn":
                    cancel event
                    if {@no-permission-messages} is true:
                        send "&7[PWP] &cYou cannot place blocks near spawn!" to player
                    notifyViolation(player, "place blocks near spawn", {_world})
                    handleViolation(player)

# Right-click interaction protection
on right click:
    if {@block-interact} is true:
        if isWorldProtected(world of player) is true:
            if player doesn't have permission "perworldprotection.bypass":
                if player doesn't have permission "perworldprotection.bypass.%world of player%":
                    if clicked block is set:
                        if clicked block is not air:
                            cancel event
                            if {@no-permission-messages} is true:
                                send {@no-permission-message} to player
                            notifyViolation(player, "interact with blocks", world of player)
                            handleViolation(player)
    if {@entity-interact} is true:
        if isWorldProtected(world of player) is true:
            if player doesn't have permission "perworldprotection.bypass":
                if player doesn't have permission "perworldprotection.bypass.%world of player%":
                    if clicked entity is set:
                        if isEntityWhitelisted(clicked entity) is false:
                            cancel event
                            if {@no-permission-messages} is true:
                                send {@no-permission-message} to player
                            notifyViolation(player, "interact with entities", world of player)
                            handleViolation(player)

# Left-click interaction protection  
on left click:
    if {@entity-damage} is true:
        if isWorldProtected(world of player) is true:
            if clicked entity is set:
                if player doesn't have permission "perworldprotection.bypass":
                    if player doesn't have permission "perworldprotection.bypass.%world of player%":
                        if isEntityWhitelisted(clicked entity) is false:
                            cancel event
                            if {@no-permission-messages} is true:
                                send {@no-permission-message} to player
                            notifyViolation(player, "attack entities", world of player)
                            handleViolation(player)

# Entity damage protection (including boats and vehicles)
on damage:
    if {@entity-damage} is true:
        if attacker is a player:
            if victim is not a player:
                if isWorldProtected(world of attacker) is true:
                    if attacker doesn't have permission "perworldprotection.bypass":
                        if attacker doesn't have permission "perworldprotection.bypass.%world of attacker%":
                            if isEntityWhitelisted(victim) is false:
                                cancel event
                                if {@no-permission-messages} is true:
                                    send {@no-permission-message} to attacker
                                notifyViolation(attacker, "damage entities", world of attacker)
                                handleViolation(attacker)

# Item drop protection
on drop:
    if {@item-drop} is true:
        if isWorldProtected(world of player) is true:
            if player doesn't have permission "perworldprotection.bypass":
                if player doesn't have permission "perworldprotection.bypass.%world of player%":
                    cancel event
                    if {@no-permission-messages} is true:
                        send {@no-permission-message} to player
                    notifyViolation(player, "drop items", world of player)
                    handleViolation(player)

# Item pickup protection
on pickup:
    if {@item-pickup} is true:
        if isWorldProtected(world of player) is true:
            if player doesn't have permission "perworldprotection.bypass":
                if player doesn't have permission "perworldprotection.bypass.%world of player%":
                    cancel event
                    if {@no-permission-messages} is true:
                        send {@no-permission-message} to player
                    notifyViolation(player, "pick up items", world of player)
                    handleViolation(player)

# Inventory interaction protection
on inventory click:
    if {@inventory-access} is true:
        if isWorldProtected(world of player) is true:
            if inventory of player is not player's inventory:
                if player doesn't have permission "perworldprotection.bypass":
                    if player doesn't have permission "perworldprotection.bypass.%world of player%":
                        cancel event
                        if {@no-permission-messages} is true:
                            send {@no-permission-message} to player
                        notifyViolation(player, "access inventories", world of player)
                        handleViolation(player)

# PvP protection
on damage:
    if {@pvp} is true:
        if attacker is a player:
            if victim is a player:
                if isWorldProtected(world of attacker) is true:
                    if attacker doesn't have permission "perworldprotection.bypass":
                        if attacker doesn't have permission "perworldprotection.bypass.%world of attacker%":
                            cancel event
                            if {@no-permission-messages} is true:
                                send {@no-permission-message} to attacker
                            notifyViolation(attacker, "attack players", world of attacker)
                            handleViolation(attacker)
    
    # Player damage protection (from all sources)
    if {@player-damage} is true:
        if victim is a player:
            if isWorldProtected(world of victim) is true:
                if victim doesn't have permission "perworldprotection.bypass":
                    if victim doesn't have permission "perworldprotection.bypass.%world of victim%":
                        # Allow PvP damage if PvP protection is disabled
                        if attacker is a player:
                            if {@pvp} is false:
                                stop
                        cancel event
                        if {@no-permission-messages} is true:
                            send "&7[PWP] &cYou are protected from damage in this world!" to victim
                        if attacker is set:
                            if attacker is a player:
                                notifyViolation(attacker, "cause damage to player", world of victim)
    
    if {@entity-damage} is true:
        if attacker is a player:
            if victim is not a player:
                if isWorldProtected(world of attacker) is true:
                    if attacker doesn't have permission "perworldprotection.bypass":
                        if attacker doesn't have permission "perworldprotection.bypass.%world of attacker%":
                            if isEntityWhitelisted(victim) is false:
                                cancel event
                                if {@no-permission-messages} is true:
                                    send {@no-permission-message} to attacker
                                notifyViolation(attacker, "damage entities", world of attacker)
                                handleViolation(attacker)

# Bucket usage protection
on bucket fill:
    if {@bucket-usage} is true:
        if isWorldProtected(world of player) is true:
            if player doesn't have permission "perworldprotection.bypass":
                if player doesn't have permission "perworldprotection.bypass.%world of player%":
                    cancel event
                    if {@no-permission-messages} is true:
                        send {@no-permission-message} to player
                    notifyViolation(player, "use buckets", world of player)
                    handleViolation(player)

on bucket empty:
    if {@bucket-usage} is true:
        if isWorldProtected(world of player) is true:
            if player doesn't have permission "perworldprotection.bypass":
                if player doesn't have permission "perworldprotection.bypass.%world of player%":
                    cancel event
                    if {@no-permission-messages} is true:
                        send {@no-permission-message} to player
                    notifyViolation(player, "use buckets", world of player)
                    handleViolation(player)

# Mob spawning protection
on spawn of creature:
    if {@mob-spawning} is true:
        if isWorldProtected(world of event-entity) is true:
            if event-entity is not a player:
                cancel event

# Explosion protection
on explode:
    if {@explosions} is true:
        if isWorldProtected(world of event-entity) is true:
            cancel event

# Fire spread protection
on ignite:
    if {@fire-spread} is true:
        if isWorldProtected(world of event-block) is true:
            cancel event

on burn:
    if {@fire-spread} is true:
        if isWorldProtected(world of event-block) is true:
            cancel event

# Leaf decay protection
on leaves decay:
    if {@leaf-decay} is true:
        if isWorldProtected(world of event-block) is true:
            cancel event

# Crop trampling protection
on step on farmland:
    if {@crop-trample} is true:
        if isWorldProtected(world of event-block) is true:
            if player doesn't have permission "perworldprotection.bypass":
                if player doesn't have permission "perworldprotection.bypass.%world of event-block%":
                    cancel event
                    if {@no-permission-messages} is true:
                        send {@no-permission-message} to player
                    notifyViolation(player, "trample crops", world of event-block)
                    handleViolation(player)

# Enderman grief protection
on pick up:
    if {@enderman-grief} is true:
        if event-entity is an enderman:
            if isWorldProtected(world of event-entity) is true:
                cancel event

# Liquid flow protection
on flow:
    if {@liquid-flow} is true:
        if isWorldProtected(world of event-block) is true:
            cancel event

# Player join - reset violation counter and welcome message
on join:
    delete {pwp.violations.%player%}
    if isWorldProtected(world of player) is true:
        wait 2 seconds
        send "&7[PWP] Welcome to a protected world! Type &e/pwp status &7for info." to player

# Register permissions for plugins like LuckPerms
on skript load:
    execute console command "lp creategroup perworldprotection.admin"
    execute console command "lp creategroup perworldprotection.status" 
    execute console command "lp creategroup perworldprotection.bypass"
    execute console command "lp creategroup perworldprotection.notify"

# Player world change - notify if entering protected world
on world change:
    if isWorldProtected(event-world) is true:
        send "&7[PWP] You have entered a protected world: &e%event-world%" to player
